import argparse
import telnetlib
import socket

def check_service(host, port, username, password, blank_password):
    try:
        # Resolve the hostname to an IP address
        ip_address = socket.gethostbyname(host)
        print(f"Checking service on {ip_address} ({host}) using port {port}")

        # Connect to the specified service
        with telnetlib.Telnet(host, port) as tn:
            # Receive the server's banner message
            banner = tn.read_until(b"\r\n", timeout=5).decode("utf-8")
            print(f"Received banner for {ip_address} ({host}): {banner.strip()}")

            # Check if authentication details are provided
            if username and (password or blank_password):
                if not blank_password:
                    print("Authentication details provided:")
                    print(f"Username: {username}")
                    print(f"Password: {password}")
                else:
                    print("Authentication details provided:")
                    print(f"Username: {username}")
                    print("Blank password indicated.")
            elif username and not (password or blank_password):
                print("Username provided, but no password specified.")

    except Exception as e:
        print(f"Failed to connect to {ip_address} ({host}) on port {port}: {str(e)}")

def main():
    # Create a command-line argument parser with improved help message
    parser = argparse.ArgumentParser(description="Service Checker", formatter_class=argparse.RawTextHelpFormatter)

    # Add arguments for specifying hostname(s) and port
    parser.add_argument("hosts", nargs="+", help="Hostname(s) to check")
    parser.add_argument("-p", "--port", type=int, default=80, help="Port to use for the check (default: 80)")

    # Add optional arguments for username and password
    parser.add_argument("-u", "--username", help="Username for authentication")
    parser.add_argument("-P", "--password", help="Password for authentication")

    # Add an optional switch for blank password
    parser.add_argument("-b", "--blank-password", action="store_true", help="Indicate a blank password")

    # Add an optional argument for specifying the hosts file
    parser.add_argument("--host", help="Path to the hosts file")

    # Update the script's description
    description = """
    This script checks the availability of a service on one or more hosts using Telnet.
    You can specify multiple hosts and optional authentication details.
    If no port is provided, the script uses port 80 as the default.
    """
    parser.description = description

    # Parse the command-line arguments
    args = parser.parse_args()

    # If a hosts file is provided, read the hosts from the file
    if args.host:
        with open(args.host, "r") as host_file:
            host_lines = host_file.readlines()
            # Append the hosts from the file to the hosts list
            args.hosts.extend([line.strip() for line in host_lines])

    # Loop through each host and check the specified service
    for host in args.hosts:
        check_service(host, args.port, args.username, args.password, args.blank_password)
        print("----------------------------------------------")

if __name__ == "__main__":
    main()

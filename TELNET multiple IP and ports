import argparse
import telnetlib
import socket

def check_service(host, port, username, password, blank_password):
    try:
        # Resolve the hostname to an IP address
        ip_address = socket.gethostbyname(host)
        print(f"Checking service on {ip_address} ({host}) using port {port}")

        # Connect to the specified service
        with telnetlib.Telnet(host, port) as tn:
            # Receive the server's banner message
            banner = tn.read_until(b"\r\n", timeout=5).decode("utf-8")
            print(f"Received banner for {ip_address} ({host}): {banner.strip()}")

            # Check if authentication details are provided
            if username and (password or blank_password):
                if not blank_password:
                    print("Authentication details provided:")
                    print(f"Username: {username}")
                    print(f"Password: {password}")
                else:
                    print("Authentication details provided:")
                    print(f"Username: {username}")
                    print("Blank password indicated.")
            elif username and not (password or blank_password):
                print("Username provided, but no password specified.")

    except Exception as e:
        print(f"Failed to connect to {ip_address} ({host}) on port {port}: {str(e)}")

def main():
    # Create a command-line argument parser
    parser = argparse.ArgumentParser(description="Service Checker")

    # Add arguments for specifying hostname(s) and port
    parser.add_argument("hosts", nargs="+", help="Hostname(s) to check")
    parser.add_argument("port", type=int, help="Port to use for the check")

    # Add optional arguments for username and password
    parser.add_argument("-u", "--username", help="Username for authentication")
    parser.add_argument("-p", "--password", help="Password for authentication")

    # Add an optional switch for blank password
    parser.add_argument("-b", "--blank-password", action="store_true", help="Indicate a blank password")

    # Parse the command-line arguments
    args = parser.parse_args()

    # Loop through each host and check the specified service
    for host in args.hosts:
        check_service(host, args.port, args.username, args.password, args.blank_password)
        print("----------------------------------------------")

if __name__ == "__main__":
    main()
